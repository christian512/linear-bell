LoadPackage("json");

#Define the Symmetry Group
GRP_RED := Group((33,65)(34,66)(35,67)(36,68)(37,69)(38,70)(39,71)(40,72)(41,73)(42,74)(43,75)(44,76)(45,77)(46,78)(47,79)(48,80)(49,81)(50,82)(51,83)(52,84)(53,85)(54,86)(55,87)(56,88)(57,89)(58,90)(59,91)(60,92)(61,93)(62,94)(63,95)(64,96),
(17,65)(18,66)(19,67)(20,68)(21,69)(22,70)(23,71)(24,72)(25,73)(26,74)(27,75)(28,76)(29,77)(30,78)(31,79)(32,80)(49,97)(50,98)(51,99)(52,100)(53,101)(54,102)(55,103)(56,104)(57,105)(58,106)(59,107)(60,108)(61,109)(62,110)(63,111)(64,112),
(9,65)(10,66)(11,67)(12,68)(13,69)(14,70)(15,71)(16,72)(25,81)(26,82)(27,83)(28,84)(29,85)(30,86)(31,87)(32,88)(41,97)(42,98)(43,99)(44,100)(45,101)(46,102)(47,103)(48,104)(57,113)(58,114)(59,115)(60,116)(61,117)(62,118)(63,119)(64,120),
(3,5)(4,6)(11,13)(12,14)(19,21)(20,22)(27,29)(28,30)(35,37)(36,38)(43,45)(44,46)(51,53)(52,54)(59,61)(60,62)(67,69)(68,70)(75,77)(76,78)(83,85)(84,86)(91,93)(92,94)(99,101)(100,102)(107,109)(108,110)(115,117)(116,118)(123,125)(124,126),
(2,5)(4,7)(10,13)(12,15)(18,21)(20,23)(26,29)(28,31)(34,37)(36,39)(42,45)(44,47)(50,53)(52,55)(58,61)(60,63)(66,69)(68,71)(74,77)(76,79)(82,85)(84,87)(90,93)(92,95)(98,101)(100,103)(106,109)(108,111)(114,117)(116,119)(122,125)(124,127),
(1,65)(2,66)(3,67)(4,68)(5,69)(6,70)(7,71)(8,72)(9,73)(10,74)(11,75)(12,76)(13,77)(14,78)(15,79)(16,80)(17,81)(18,82)(19,83)(20,84)(21,85)(22,86)(23,87)(24,88)(25,89)(26,90)(27,91)(28,92)(29,93)(30,94)(31,95)(32,96)(33,97)(34,98)(35,99)(36,100)(37,101)(38,102)(39,103)(40,104)(41,105)(42,106)(43,107)(44,108)(45,109)(46,110)(47,111)(48,112)(49,113)(50,114)(51,115)(52,116)(53,117)(54,118)(55,119)(56,120)(57,121)(58,122)(59,123)(60,124)(61,125)(62,126)(63,127)(64,128),
(1,5)(2,6)(3,7)(4,8)(9,13)(10,14)(11,15)(12,16)(17,21)(18,22)(19,23)(20,24)(25,29)(26,30)(27,31)(28,32)(33,37)(34,38)(35,39)(36,40)(41,45)(42,46)(43,47)(44,48)(49,53)(50,54)(51,55)(52,56)(57,61)(58,62)(59,63)(60,64)(65,69)(66,70)(67,71)(68,72)(73,77)(74,78)(75,79)(76,80)(81,85)(82,86)(83,87)(84,88)(89,93)(90,94)(91,95)(92,96)(97,101)(98,102)(99,103)(100,104)(105,109)(106,110)(107,111)(108,112)(113,117)(114,118)(115,119)(116,120)(121,125)(122,126)(123,127)(124,128));


# Storage for all polytopes found
all_polys := [];
max_recursion := 20;
for i in [1..max_recursion] do
    Add(all_polys, []);
od;

# setup files
outfile := IO_File("/home/chris/fromgap.pipe", "w");
infile := IO_File("/home/chris/togap.pipe", "r");

while true do

        # read command from input
        str := IO_ReadLine(infile);
        if str <> "" then
            # Print("GAP read: ", str);
            # Convert to Gap object
            arr := JsonStringToGap(str);
            level := arr[1]+1;
            # Check that length of the all_polys list has the same length as the
            if level > max_recursion then
                Print("WATCH OUT: MAX RECURSION LEVEL IN GAP REACHED!");
            fi;
            Remove(arr, 1);
            # Print("Level: ", level, "\n");
            # iterate over all polytopes
            equiv := 0;
            for poly in all_polys[level] do
                res := RepresentativeAction(GRP_RED, poly, arr, OnSets);
                if res <> fail then
                    equiv := 1;
                    IO_WriteLine(outfile, "true");
                    break;
                fi;
            od;
            if equiv = 0 then
                Add(all_polys[level], arr);
                Print("level:", level, " // number polys: ", Length(all_polys[level]), "\n");
                IO_WriteLine(outfile, "false");
            fi;
        fi;
od;

