LoadPackage("json");

#Define the Symmetry Group
GRP_RED := Group((17,65)(18,66)(19,67)(20,68)(21,69)(22,70)(23,71)(24,72)(25,73)(26,74)(27,75)(28,76)(29,77)(30,78)(31,79)(32,80)(33,129)(34,130)(35,131)(36,132)(37,133)(38,134)(39,135)(40,136)(41,137)(42,138)(43,139)(44,140)(45,141)(46,142)(47,143)(48,144)(49,193)(50,194)(51,195)(52,196)(53,197)(54,198)(55,199)(56,200)(57,201)(58,202)(59,203)(60,204)(61,205)(62,206)(63,207)(64,208)(97,145)(98,146)(99,147)(100,148)(101,149)(102,150)(103,151)(104,152)(105,153)(106,154)(107,155)(108,156)(109,157)(110,158)(111,159)(112,160)(113,209)(114,210)(115,211)(116,212)(117,213)(118,214)(119,215)(120,216)(121,217)(122,218)(123,219)(124,220)(125,221)(126,222)(127,223)(128,224)(177,225)(178,226)(179,227)(180,228)(181,229)(182,230)(183,231)(184,232)(185,233)(186,234)(187,235)(188,236)(189,237)(190,238)(191,239)(192,240),
(2,5)(3,9)(4,13)(7,10)(8,14)(12,15)(18,21)(19,25)(20,29)(23,26)(24,30)(28,31)(34,37)(35,41)(36,45)(39,42)(40,46)(44,47)(50,53)(51,57)(52,61)(55,58)(56,62)(60,63)(66,69)(67,73)(68,77)(71,74)(72,78)(76,79)(82,85)(83,89)(84,93)(87,90)(88,94)(92,95)(98,101)(99,105)(100,109)(103,106)(104,110)(108,111)(114,117)(115,121)(116,125)(119,122)(120,126)(124,127)(130,133)(131,137)(132,141)(135,138)(136,142)(140,143)(146,149)(147,153)(148,157)(151,154)(152,158)(156,159)(162,165)(163,169)(164,173)(167,170)(168,174)(172,175)(178,181)(179,185)(180,189)(183,186)(184,190)(188,191)(194,197)(195,201)(196,205)(199,202)(200,206)(204,207)(210,213)(211,217)(212,221)(215,218)(216,222)(220,223)(226,229)(227,233)(228,237)(231,234)(232,238)(236,239)(242,245)(243,249)(244,253)(247,250)(248,254)(252,255),
(1,65)(2,66)(3,67)(4,68)(5,69)(6,70)(7,71)(8,72)(9,73)(10,74)(11,75)(12,76)(13,77)(14,78)(15,79)(16,80)(17,81)(18,82)(19,83)(20,84)(21,85)(22,86)(23,87)(24,88)(25,89)(26,90)(27,91)(28,92)(29,93)(30,94)(31,95)(32,96)(33,97)(34,98)(35,99)(36,100)(37,101)(38,102)(39,103)(40,104)(41,105)(42,106)(43,107)(44,108)(45,109)(46,110)(47,111)(48,112)(49,113)(50,114)(51,115)(52,116)(53,117)(54,118)(55,119)(56,120)(57,121)(58,122)(59,123)(60,124)(61,125)(62,126)(63,127)(64,128),
(1,129)(2,130)(3,131)(4,132)(5,133)(6,134)(7,135)(8,136)(9,137)(10,138)(11,139)(12,140)(13,141)(14,142)(15,143)(16,144)(17,145)(18,146)(19,147)(20,148)(21,149)(22,150)(23,151)(24,152)(25,153)(26,154)(27,155)(28,156)(29,157)(30,158)(31,159)(32,160)(33,161)(34,162)(35,163)(36,164)(37,165)(38,166)(39,167)(40,168)(41,169)(42,170)(43,171)(44,172)(45,173)(46,174)(47,175)(48,176)(49,177)(50,178)(51,179)(52,180)(53,181)(54,182)(55,183)(56,184)(57,185)(58,186)(59,187)(60,188)(61,189)(62,190)(63,191)(64,192),
(1,193)(2,194)(3,195)(4,196)(5,197)(6,198)(7,199)(8,200)(9,201)(10,202)(11,203)(12,204)(13,205)(14,206)(15,207)(16,208)(17,209)(18,210)(19,211)(20,212)(21,213)(22,214)(23,215)(24,216)(25,217)(26,218)(27,219)(28,220)(29,221)(30,222)(31,223)(32,224)(33,225)(34,226)(35,227)(36,228)(37,229)(38,230)(39,231)(40,232)(41,233)(42,234)(43,235)(44,236)(45,237)(46,238)(47,239)(48,240)(49,241)(50,242)(51,243)(52,244)(53,245)(54,246)(55,247)(56,248)(57,249)(58,250)(59,251)(60,252)(61,253)(62,254)(63,255)(64,256),
(1,5)(2,6)(3,7)(4,8)(17,21)(18,22)(19,23)(20,24)(33,37)(34,38)(35,39)(36,40)(49,53)(50,54)(51,55)(52,56)(65,69)(66,70)(67,71)(68,72)(81,85)(82,86)(83,87)(84,88)(97,101)(98,102)(99,103)(100,104)(113,117)(114,118)(115,119)(116,120)(129,133)(130,134)(131,135)(132,136)(145,149)(146,150)(147,151)(148,152)(161,165)(162,166)(163,167)(164,168)(177,181)(178,182)(179,183)(180,184)(193,197)(194,198)(195,199)(196,200)(209,213)(210,214)(211,215)(212,216)(225,229)(226,230)(227,231)(228,232)(241,245)(242,246)(243,247)(244,248),
(1,9)(2,10)(3,11)(4,12)(17,25)(18,26)(19,27)(20,28)(33,41)(34,42)(35,43)(36,44)(49,57)(50,58)(51,59)(52,60)(65,73)(66,74)(67,75)(68,76)(81,89)(82,90)(83,91)(84,92)(97,105)(98,106)(99,107)(100,108)(113,121)(114,122)(115,123)(116,124)(129,137)(130,138)(131,139)(132,140)(145,153)(146,154)(147,155)(148,156)(161,169)(162,170)(163,171)(164,172)(177,185)(178,186)(179,187)(180,188)(193,201)(194,202)(195,203)(196,204)(209,217)(210,218)(211,219)(212,220)(225,233)(226,234)(227,235)(228,236)(241,249)(242,250)(243,251)(244,252),
(1,13)(2,14)(3,15)(4,16)(17,29)(18,30)(19,31)(20,32)(33,45)(34,46)(35,47)(36,48)(49,61)(50,62)(51,63)(52,64)(65,77)(66,78)(67,79)(68,80)(81,93)(82,94)(83,95)(84,96)(97,109)(98,110)(99,111)(100,112)(113,125)(114,126)(115,127)(116,128)(129,141)(130,142)(131,143)(132,144)(145,157)(146,158)(147,159)(148,160)(161,173)(162,174)(163,175)(164,176)(177,189)(178,190)(179,191)(180,192)(193,205)(194,206)(195,207)(196,208)(209,221)(210,222)(211,223)(212,224)(225,237)(226,238)(227,239)(228,240)(241,253)(242,254)(243,255)(244,256),
(2,17)(3,33)(4,49)(5,65)(6,81)(7,97)(8,113)(9,129)(10,145)(11,161)(12,177)(13,193)(14,209)(15,225)(16,241)(19,34)(20,50)(21,66)(22,82)(23,98)(24,114)(25,130)(26,146)(27,162)(28,178)(29,194)(30,210)(31,226)(32,242)(36,51)(37,67)(38,83)(39,99)(40,115)(41,131)(42,147)(43,163)(44,179)(45,195)(46,211)(47,227)(48,243)(53,68)(54,84)(55,100)(56,116)(57,132)(58,148)(59,164)(60,180)(61,196)(62,212)(63,228)(64,244)(70,85)(71,101)(72,117)(73,133)(74,149)(75,165)(76,181)(77,197)(78,213)(79,229)(80,245)(87,102)(88,118)(89,134)(90,150)(91,166)(92,182)(93,198)(94,214)(95,230)(96,246)(104,119)(105,135)(106,151)(107,167)(108,183)(109,199)(110,215)(111,231)(112,247)(121,136)(122,152)(123,168)(124,184)(125,200)(126,216)(127,232)(128,248)(138,153)(139,169)(140,185)(141,201)(142,217)(143,233)(144,249)(155,170)(156,186)(157,202)(158,218)(159,234)(160,250)(172,187)(173,203)(174,219)(175,235)(176,251)(189,204)(190,220)(191,236)(192,252)(206,221)(207,237)(208,253)(223,238)(224,254)(240,255));

# Storage for all polytopes found
all_polys := [];
max_recursion := 20;
for i in [1..max_recursion] do
    Add(all_polys, []);
od;

# setup files
outfile := IO_File("/home/chris/fromgap.pipe", "w");
infile := IO_File("/home/chris/togap.pipe", "r");

while true do
        # read command from input
        str := IO_ReadLine(infile);
        if str <> "" then
            # Print("GAP READ: ", str);
            # Convert to GAP Object
            arr := JsonStringToGap(str);
            # Extract Level
            level := arr[1][1] + 1;

            Remove(arr,1);
            if level > max_recursion then
                Print("WATCH OUT: MAX RECURSION LEVEL IN GAP REACHED");
            fi;

            response := [];
            for i in [1..Length(arr)] do
                cpoly := arr[i];
                equiv := 0;
                for tpoly in all_polys[level] do
                    res := RepresentativeAction(GRP_RED, tpoly, cpoly, OnSets);
                    if res <> fail then
                        equiv := 1;
                        break;
                    fi;
                od;
                if equiv = 0 then
                    Add(all_polys[level], cpoly);
                    Add(response, i-1);
                    Print("Level ", level, ": ",  Length(all_polys[level]), "\n");
                fi;
            od;
            # write false in case there is no equivalent polytope
            if Length(response) = 0 then
                IO_WriteLine(outfile, "false");
            else
                IO_WriteLine(outfile, response);
            fi;
        fi;
od;

