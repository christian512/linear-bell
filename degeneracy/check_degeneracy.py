"""
This file checks the degeneracy of a polytope by checking how many vertices are on its facet.
"""

from polybell.panda_helper import read_inequalities
from polybell.utils import get_deterministic_behaviors_two_party
import numpy as np
import argparse

parser = argparse.ArgumentParser()
parser.add_argument(dest='ma', help="number of inputs for ALICE")
parser.add_argument(dest='mb', help='number of inputs for BOB')
parser.add_argument(dest='na', help='number of outputs for ALICE')
parser.add_argument(dest='nb', help='number of outputs for BOB')
parser.add_argument(dest='filename', help='Path to file including the facets to be checked (PANDA format).')
args = parser.parse_args()

# set scenario
ma, mb, na, nb = int(args.ma), int(args.mb), int(args.na), int(args.nb)
dim = ma * (na - 1) * mb * (nb - 1) + ma * (na - 1) + mb * (nb - 1)
print('Calculations for the {}{}{}{} scenario'.format(ma, mb, na, nb))

# set file
filename = args.filename

# read inequalities from file
try:
    ineqs = read_inequalities(filename)
except Exception as e:
    print('Could not load file. Did you give the correct path and has the file the correct format? \n File needs to be generated by PANDA or RANDA.')
print('Loaded {} facets'.format(ineqs.shape[0]))

# Generate vertices
vertices = get_deterministic_behaviors_two_party(range(ma), range(mb), range(na), range(nb), )
print('Generated {} vertices'.format(vertices.shape[0]))

# list for number of vertices per facet
num_vert_per_facet = []
for facet in ineqs:
    counter = 0
    # check the correct dimensions of the facet and vertices
    assert len(facet) == vertices.shape[1] + 1
    for v in vertices:
        if v @ facet[:-1] == -1.0 * facet[-1]:
            counter += 1
    num_vert_per_facet.append(counter)
num_vert_per_facet = np.array(num_vert_per_facet)

print('Number of vertices on each facet: ', num_vert_per_facet)
print('Dimension of polytope: ', dim)
print('Maximal number of vertices on each facet: ', np.max(num_vert_per_facet))
print('Minimal number of vertices on each facet: ', np.min(num_vert_per_facet))
print('Average number of vertices on each facet: ', np.average(num_vert_per_facet))

if dim <= np.min(num_vert_per_facet):
    print('Polytope is non-simplical -> facet enumeration is degenerate')
